<?php

require_once dirname(__FILE__) . '/../../../../lib/HTMLElement/Field/Password.php';

/**
 * Test class for Field_Password.
 * Generated by PHPUnit on 2013-04-11 at 18:42:16.
 */
class Field_PasswordTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Field_Password
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Field_Password('Passwprd', 'password');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement testGetHtml().
     */
    public function testGetHtml() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetEditHtml().
     */
    public function testGetEditHtml() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetNewHtml().
     */
    public function testGetNewHtml() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetValueFromPost().
     */
    public function testGetValueFromPost() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testEncryptPassword().
     */
    public function testEncryptPassword() {
        // Remove the following lines when you implement this test.
        $encryptedPassword = Field_Password::encryptPassword('testPassword');
        $this->assertGreaterThan(40, strlen($encryptedPassword));
        $this->assertContains('|', $encryptedPassword);
        
        // encrypt the same string again
        $encryptedPassword2 = Field_Password::encryptPassword('testPassword');
        $this->assertNotEquals($encryptedPassword, $encryptedPassword2);
    }

    /**
     * @todo Implement testPasswordIsCorrect().
     */
    public function testPasswordIsCorrect() {
        $encryptedPassword = Field_Password::encryptPassword('testPassword');
        $this->assertTrue(Field_Password::passwordIsCorrect('testPassword', $encryptedPassword));

        $encryptedPassword2 = Field_Password::encryptPassword('testPassword');
        $this->assertNotEquals($encryptedPassword, $encryptedPassword2);
        $this->assertTrue(Field_Password::passwordIsCorrect('testPassword', $encryptedPassword2));
    }

}

?>
