<?php

require_once dirname(__FILE__) . '/../../../../lib/HTMLElement/Field/Select.php';

/**
 * Test class for Field_Select.
 * Generated by PHPUnit on 2013-04-14 at 19:53:05.
 */
class Field_SelectTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Field_Select
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Field_Select('Some list', 'some_list_value', 300, 'test', 'value');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement testSetStaticValues().
     */
    public function testSetStaticValues() {
        $this->object->setStaticValues(array(
            '1' => 'red',
            '2' => 'green',
            '3' => 'blue',
            '4' => 'yellow',
            '5' => 'white',
            '6' => 'black'
        ));

        $html = $this->object->getEditHtml();
        echo 'html = GREG', $html, 'GREG<br>';
        $this->assertContains('red', $html);
        $this->assertContains('green', $html);
        $this->assertContains('blue', $html);
        $this->assertContains('yellow', $html);
        $this->assertContains('white', $html);
        $this->assertContains('black', $html);
    }

    /**
     * @todo Implement testGetHtml().
     */
    public function testGetHtml() {
        $this->object->setValue('3');

        $this->object->setStaticValues(array(
            '1' => 'red',
            '2' => 'green',
            '3' => 'blue',
            '4' => 'yellow',
            '5' => 'white',
            '6' => 'black'
        ));

        $html = $this->object->getHtml();
        $this->assertEquals('blue', $html);
    }

    /**
     * test the html with the static value
     */
    public function testGetNewHtml() {
        $this->object->setStaticValues(array(
            '1' => 'red',
            '2' => 'green',
            '3' => 'blue',
            '4' => 'yellow',
            '5' => 'white',
            '6' => 'black'
        ));

        $html = $this->object->getNewHtml();
        $this->assertContains('red', $html);
        $this->assertContains('green', $html);
        $this->assertContains('blue', $html);
        $this->assertContains('yellow', $html);
        $this->assertContains('white', $html);
        $this->assertContains('black', $html);
    }

    /**
     * check that the values are encoded
     */
    public function testHtmlEntities() {
        $this->object->setStaticValues(array(
            '1' => '<'
        ));

        $html = $this->object->getEditHtml();
        $this->assertContains('&lt;', $html);
    }

    /**
     * check the empty option in the beginning
     */
    public function checkEmptyValue() {
        $this->object->setStaticValues(array(
            '1' => '<'
        ));

        // check that the empty option exists
        $html = $this->object->getEditHtml();
        $this->assertContains('value=""', $html);

        // check that the empty option DOES NOT EXIST
        $this->object->setAddEmptyOption(false);
        $html = $this->object->getEditHtml();
        $this->assertNotContains('value=""', $html);
    }

}

?>
