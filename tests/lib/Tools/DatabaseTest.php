<?php

require_once dirname(__FILE__) . '/../../../lib/Tools/Database.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-10 at 14:09:52.
 */
class DatabaseTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Database
     */
    protected $object;

    /**
     * @var string - name of the table for tests 
     */
    protected $testTableName = 'test';

    /**
     * @var number 
     */
    protected $temporaryRowId = null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Database::getInstance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Database::get
     * @todo   Implement testGet().
     */
    public function testGet() {

        $db = Database::get();
        $this->assertInstanceOf('PDO', $db);
    }

    /**
     * @covers Database::getInstance
     * @todo   Implement testGetInstance().
     */
    public function testGetInstance() {

        $db = Database::getInstance();
        $this->assertInstanceOf('PDO', $db);
    }

    /**
     * Get total number of rows
     * @return type
     */
    protected function _getTotalRows() {
        $sql = 'select count(*) as `total` from `' . $this->testTableName . '`';
        $row = $this->object->query($sql)->fetch(PDO::FETCH_ASSOC);
        return $row['total'];
    }

    /**
     * Get the value from the row
     * @param type $rowId
     * @return string
     */
    protected function _getRowValue($rowId) {
        $sql = 'select `value` from `' . $this->testTableName . '` where `id` = :id';
        $stmt = $this->object->prepare($sql);
        $stmt->bindValue(':id', $rowId);
        $stmt->execute();
        $row = $stmt->fetch();
        return $row ? $row['value'] : null;
    }

    /**
     * @covers Database::insert
     * @todo   Implement testInsert().
     */
    public function testAll() {

        // count before
        $totalBefore = $this->_getTotalRows();

        $this->temporaryRowId = $this->object->insert($this->testTableName, array('key' => 'someTestKey' . uniqid(), 'value' => 'some test value ' . uniqid()));

        // check the result
        $this->assertInternalType('string', $this->temporaryRowId);
        $this->assertInternalType('int', intVal($this->temporaryRowId));
        $this->assertEquals($this->temporaryRowId, intVal($this->temporaryRowId));

        // get the total rows after
        $totalAfter = $this->_getTotalRows();

        // check that the total rows grown
        $this->assertGreaterThan($totalBefore, $totalAfter);
        
        
        // TEST UPDATE

        // get the old value of the 
        $oldValue = $this->_getRowValue($this->temporaryRowId);

        // update the value of the row
        $this->object->update($this->testTableName, array('value' => 'new value ' . uniqid()), array('id' => $this->temporaryRowId));

        // get the new (updated) value
        $newValue = $this->_getRowValue($this->temporaryRowId);

        $this->assertNotEquals($oldValue, $newValue);     
        
        
        // TEST DELETE
        
        $totalBefore = $this->_getTotalRows();
        $this->object->delete($this->testTableName, array('id' => $this->temporaryRowId));
        $totalAfter = $this->_getTotalRows();
        
        $this->assertLessThan($totalBefore, $totalAfter);
    }

}
